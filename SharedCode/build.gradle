plugins {
    id "kotlin-multiplatform"
    id "kotlinx-serialization"
    id "com.squareup.sqldelight"
}

kotlin {

    targets {
        //final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64
        /*
        // iPhone simulator    : presets.iosX64
        // real iDevice 32 bit : presets.iosArm32
        // real iDevice 64 bit : presets.iosArm64
        */

        //def iOSTarget = presets.iosArm64    //Device
        def iOSTarget = presets.iosX64  //Simulator
        fromPreset(iOSTarget, "iOS") {
            binaries {
                framework("SharedCode")
            }
        }

        fromPreset(presets.jvm, "android")
    }
    sourceSets {
        commonMain.dependencies {

            api("org.jetbrains.kotlin:kotlin-stdlib-common")

            implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version")
            implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version")

            implementation("io.ktor:ktor-client-core:$ktor_version")
            implementation("io.ktor:ktor-client-json:$ktor_version")
            implementation("io.ktor:ktor-client-mock:$ktor_version")
            implementation("io.ktor:ktor-client-serialization:$ktor_version")

            implementation("com.squareup.sqldelight:runtime:$sqldelight_version")

            implementation("com.russhwolf:multiplatform-settings:$multiplatformSettings")
        }

        androidMain.dependencies {
            api("org.jetbrains.kotlin:kotlin-stdlib")

            implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version")

            implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version")

            implementation("io.ktor:ktor-client-core-jvm:$ktor_version")
            implementation("io.ktor:ktor-client-json-jvm:$ktor_version")

            implementation("io.ktor:ktor-client-android:$ktor_version")
            implementation("io.ktor:ktor-client-okhttp:$ktor_version")
            implementation("io.ktor:ktor-client-mock-jvm:$ktor_version")
            implementation("io.ktor:ktor-client-serialization-jvm:$ktor_version")

            implementation("com.squareup.sqldelight:runtime-jvm:$sqldelight_version")
        }

        iOSMain.dependencies {
            implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version")
            implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version")

            implementation("io.ktor:ktor-client-ios:$ktor_version")
            implementation("io.ktor:ktor-client-core-native:$ktor_version")
            implementation("io.ktor:ktor-client-json-native:$ktor_version")

            implementation("io.ktor:ktor-client-serialization-native:$ktor_version")

            api("io.ktor:ktor-client-mock-native:$ktor_version")
            implementation("com.squareup.sqldelight:ios-driver:$sqldelight_version")
        }
    }
}

sqldelight {
    KotlinMppDb {
        packageName = "com.erl.kotlinmpp.db"
    }
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: "DEBUG"
    final def framework = kotlin.targets.iOS.binaries.getFramework("SharedCode", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}
tasks.build.dependsOn packForXCode